import numpy as np

# Preprocessing: Ensure 'month' is numeric for regression modeling
data['month_numeric'] = data['month'].dt.month + (data['month'].dt.year - data['month'].dt.year.min()) * 12

# Function to perform Linear Regression manually
def linear_regression_manual(X, y):
    # Add bias term to the feature matrix (X)
    X = np.vstack([np.ones(len(X)), X]).T  # Bias term added
    # Compute coefficients using the Normal Equation: beta = (X'X)^(-1)X'y
    beta = np.linalg.inv(X.T @ X) @ X.T @ y
    return beta

# Function to predict using the regression coefficients
def predict_manual(X, beta):
    X = np.vstack([np.ones(len(X)), X]).T  # Add bias term to match coefficients
    return X @ beta

# Store results for evaluation
model_results = {}

# Columns to target for prediction
target_columns = ["temperature_city1", "temperature_city2", "temperature_city3",
                  "precipitation_city1", "precipitation_city2", "precipitation_city3"]

for target in target_columns:
    # Feature (X) and Target (y)
    X = data['month_numeric'].values
    y = data[target].values
    
    # Train-Test Split: Use 80% for training and 20% for testing
    split_index = int(len(X) * 0.8)
    X_train, X_test = X[:split_index], X[split_index:]
    y_train, y_test = y[:split_index], y[split_index:]
    
    # Train Linear Regression
    beta = linear_regression_manual(X_train, y_train)
    
    # Make Predictions
    y_pred = predict_manual(X_test, beta)
    
    # Evaluate Model
    mae = np.mean(np.abs(y_test - y_pred))
    ss_total = np.sum((y_test - np.mean(y_test)) ** 2)
    ss_residual = np.sum((y_test - y_pred) ** 2)
    r2 = 1 - (ss_residual / ss_total)
    
    # Store model results
    model_results[target] = {
        "Coefficients": beta,
        "MAE": mae,
        "R-squared": r2
    }
    
    print(f"Results for {target}:")
    print(f"Coefficients (Intercept, Slope): {beta}")
    print(f"Mean Absolute Error (MAE): {mae:.2f}")
    print(f"R-squared: {r2:.2f}\n")
# Forecast Future Values for Next 12 Months
future_months = np.arange(data['month_numeric'].max() + 1, data['month_numeric'].max() + 13)

# Predict and Plot Future Trends
plt.figure(figsize=(12, 6))

for target in target_columns:
    # Retrieve the coefficients
    beta = model_results[target]["Coefficients"]
    
    # Forecast Future Values
    future_predictions = predict_manual(future_months, beta)
    
    # Plot Predictions
    plt.plot(future_months, future_predictions, label=f"Forecast for {target}")

plt.title("Forecasted Temperature and Precipitation Levels (Next 12 Months)", fontsize=14)
plt.xlabel("Month Numeric")
plt.ylabel("Values")
plt.legend()
plt.grid()
plt.tight_layout()
plt.show()
